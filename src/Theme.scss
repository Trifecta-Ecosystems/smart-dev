@import '../node_modules/@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue.
$dash-main-primary: mat-palette($mat-green);
$dash-main-accent:  mat-palette($mat-green);

// The warn palette is optional (defaults to red).
$dash-main-warn:    mat-palette($mat-red);

// Create the theme object (a Sass map containing all of the palettes).
$dash-main-theme: mat-light-theme($dash-main-primary, $dash-main-accent, $dash-main-warn);



// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($dash-main-theme);

.sensor-theme {
  $dash-sensor-primary: mat-palette($mat-yellow);
  $dash-sensor-accent: mat-palette($mat-yellow);
  $dash-sensor-warn: mat-palette($mat-red);

  //todo these both call the mat-dark-theme method, while the first calls the mat-light-theme.  Is it ok they both call the same method?
  $dash-sensor-theme: mat-dark-theme($dash-sensor-primary, $dash-sensor-accent, $dash-sensor-warn);

  @include angular-material-theme($dash-sensor-theme);
}

.control-theme {
  $control-primary: mat-palette($mat-blue);
  $control-accent: mat-palette($mat-light-blue);
  $control-warn: mat-palette($mat-red);

  //todo these both call the mat-dark-theme method, while the first calls the mat-light-theme.  Is it ok they both call the same method?
  $control-theme: mat-dark-theme($control-primary, $control-accent, $control-warn);

  @include angular-material-theme($control-theme);
}


